function populateStageBasesWithParticipants(participants, playerData) {
  console.log('üé® Step 2C - Populating stage bases...');
  
  const stageBases = document.querySelectorAll('.stage-base');
  
  participants.forEach((participant, index) => {
    if (index >= stageBases.length) {
      console.warn(`‚ö†Ô∏è Not enough stage bases for participant ${index + 1}`);
      return;
    }
    
    const stageBase = stageBases[index];
    const isOwnCat = participant.playerId === playerData.playerId && participant.catId === playerData.catId;
    
    console.log(`üé® Step 2C - Populating stage ${index + 1}:`, participant, isOwnCat ? '(YOUR CAT)' : '');
    
    // Show cat sprite (placeholder for now - we'll need actual cat images later)
    const catSprite = stageBase.querySelector('.cat-sprite');
    if (catSprite) {
      catSprite.src = '../assets/cat-placeholder.png';
      catSprite.style.display = 'block';
    }
    
    // FIXED: Always use the server-provided data from participant object
    const catNameElement = stageBase.querySelector('.cat-name');
    if (catNameElement) {
      catNameElement.textContent = participant.catName; // ‚úÖ Always use server data
    }
    
    // FIXED: Always use the server-provided data from participant object  
    const usernameElement = stageBase.querySelector('.username');
    if (usernameElement) {
      usernameElement.textContent = participant.username; // ‚úÖ Always use server data
    }
    
    // Mark own cat for special styling
    if (isOwnCat) {
      stageBase.classList.add('own-cat');
      console.log(`üè∑Ô∏è Marked stage ${index + 1} as own cat`);
    }
    
    // Store participant data on the element for click handling
    stageBase.dataset.participantId = participant.playerId;
    stageBase.dataset.catId = participant.catId;
  });
  
  console.log('‚úÖ Step 2C - Stage bases populated');
}